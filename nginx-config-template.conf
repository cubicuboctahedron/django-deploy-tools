## Redirect from non-www to www

server {
        server_name SITE_NAME;
        return 301 $scheme://www.$host$request_uri;
    }

server {
	# listen 80 default deferred; # for Linux
	# listen 80 default accept_filter=httpready; # for FreeBSD
	#listen 80 default;

	client_max_body_size 4G;
	server_name www.SITE_NAME;

	# ~2 seconds is often enough for most folks to parse HTML/CSS and
	# retrieve needed images/icons/frames, connections are cheap in
	# nginx so increasing this is generally safe...
	keepalive_timeout 5;

	access_log /var/log/nginx/SITE_NAME-access.log;
	error_log /var/log/nginx/SITE_NAME-error.log;

	# path for static files
	location /static/ {
		alias /sites/SITE_NAME/source/hpcs/static/;
	}

	location / {
		# an HTTP header important enough to have its own Wikipedia entry:
		#   http://en.wikipedia.org/wiki/X-Forwarded-For
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

		# enable this if and only if you use HTTPS, this helps Rack
		# set the proper protocol for doing redirects:
		# proxy_set_header X-Forwarded-Proto https;

		# pass the Host: header from the client right along so redirects
		# can be set properly within the Rack application
		proxy_set_header Host $http_host;

		# we don't want nginx trying to do something clever with
		# redirects, we set the Host: header above already.
		proxy_redirect off;

		# set "proxy_buffering off" *only* for Rainbows! when doing
		# Comet/long-poll stuff.  It's also safe to set if you're
		# using only serving fast clients with Unicorn + nginx.
		# Otherwise you _want_ nginx to buffer responses to slow
		# clients, really.
		# proxy_buffering off;

		# Try to serve static files from nginx, no point in making an
		# *application* server like Unicorn/Rainbows! serve static files.
		#proxy_pass http://app_server;
		proxy_pass http://unix:/tmp/gunicorn-SITE_NAME.socket;
		#proxy_pass http://localhost:8000;
	}

	# Error pages
	error_page 500 502 503 504 /500.html;
	location = /500.html {
	    root /sites/SITE_NAME/source/hpcs/static/error/;
	}
}
